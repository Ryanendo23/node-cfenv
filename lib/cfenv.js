// Generated by CoffeeScript 2.5.1
(function() {
  // Licensed under the Apache License. See footer for details.
  var AppEnv, URL, _, cfenv, fs, getApp, getBind, getName, getPort, getServices, getURLs, pkg, ports, throwError, yaml;

  fs = require("fs");

  URL = require("url");

  pkg = require("../package.json");

  _ = require("underscore");

  ports = require("ports");

  yaml = require("js-yaml");

  //-------------------------------------------------------------------------------
  // properties on the cfenv object will be the module exports
  //-------------------------------------------------------------------------------
  cfenv = exports;

  //-------------------------------------------------------------------------------
  cfenv.getAppEnv = function(options = {}) {
    return new AppEnv(options);
  };

  //-------------------------------------------------------------------------------
  AppEnv = class AppEnv {
    //-----------------------------------------------------------------------------
    constructor(options = {}) {
      this.isLocal = process.env.VCAP_APPLICATION == null;
      if (!this.isLocal) {
        try {
          JSON.parse(process.env.VCAP_APPLICATION);
        } catch (error) {
          this.isLocal = true;
        }
      }
      if (this.isLocal) {
        this._getVcapFromFile(options);
      }
      this.app = getApp(this, options);
      this.services = getServices(this, options);
      this.name = getName(this, options);
      this.port = getPort(this);
      this.bind = getBind(this);
      this.urls = getURLs(this, options);
      this.url = this.urls[0];
    }

    //-----------------------------------------------------------------------------
    _getVcapFromFile(options) {
      var contents, err, vcap;
      if (!(options != null ? options.vcapFile : void 0)) {
        return;
      }
      contents = null;
      try {
        contents = fs.readFileSync(options.vcapFile, 'utf8');
      } catch (error) {
        err = error;
        console.log(`error reading vcapFile '${options.vcapFile}': ${err}; ignoring`);
        return;
      }
      vcap = null;
      try {
        vcap = JSON.parse(contents);
      } catch (error) {
        err = error;
        console.log(`error parsing vcapFile '${options.vcapFile}': ${err}; ignoring`);
        return;
      }
      return options.vcap = vcap;
    }

    //-----------------------------------------------------------------------------
    toJSON() {
      return {app: this.app, services: this.services, isLocal: this.isLocal, name: this.name, port: this.port, bind: this.bind, urls: this.urls, url: this.url};
    }

    //-----------------------------------------------------------------------------
    getServices() {
      var i, len, ref, result, service, services, type;
      result = {};
      ref = this.services;
      for (type in ref) {
        services = ref[type];
        for (i = 0, len = services.length; i < len; i++) {
          service = services[i];
          result[service.name] = service;
        }
      }
      return result;
    }

    //-----------------------------------------------------------------------------
    getService(spec) {
      var matches, name, service, services;
      // set our matching function
      if (_.isRegExp(spec)) {
        matches = function(name) {
          return name.match(spec);
        };
      } else {
        spec = `${spec}`;
        matches = function(name) {
          return name === spec;
        };
      }
      services = this.getServices();
      for (name in services) {
        service = services[name];
        if (matches(name)) {
          return service;
        }
      }
      // no matches
      return null;
    }

    //-----------------------------------------------------------------------------
    getServiceURL(spec, replacements = {}) {
      var credentials, key, password, purl, service, url, userid, value;
      service = this.getService(spec);
      credentials = service != null ? service.credentials : void 0;
      if (credentials == null) {
        return null;
      }
      replacements = _.clone(replacements);
      if (replacements.url) {
        url = credentials[replacements.url];
      } else {
        url = credentials.url || credentials.uri;
      }
      if (url == null) {
        return null;
      }
      delete replacements.url;
      if (_.isEmpty(replacements)) {
        return url;
      }
      purl = URL.parse(url);
      for (key in replacements) {
        value = replacements[key];
        if (key === "auth") {
          [userid, password] = value;
          purl[key] = `${credentials[userid]}:${credentials[password]}`;
        } else {
          purl[key] = credentials[value];
        }
      }
      return URL.format(purl);
    }

    //-----------------------------------------------------------------------------
    getServiceCreds(spec) {
      var service;
      service = this.getService(spec);
      if (service == null) {
        return null;
      }
      return service.credentials || {};
    }

  };

  //-------------------------------------------------------------------------------
  getApp = function(appEnv, options) {
    var e, envValue, locValue, ref, string;
    string = process.env.VCAP_APPLICATION;
    envValue = {};
    if (string != null) {
      try {
        envValue = JSON.parse(string);
      } catch (error) {
        e = error;
        throwError(`env var VCAP_APPLICATION is not JSON: /${string}/`);
      }
    }
    if (!appEnv.isLocal) {
      return envValue;
    }
    locValue = options != null ? (ref = options.vcap) != null ? ref.application : void 0 : void 0;
    if (locValue != null) {
      return locValue;
    }
    return envValue;
  };

  //-------------------------------------------------------------------------------
  getServices = function(appEnv, options) {
    var e, envValue, locValue, ref, string;
    string = process.env.VCAP_SERVICES;
    envValue = {};
    if (string != null) {
      try {
        envValue = JSON.parse(string);
      } catch (error) {
        e = error;
        throwError(`env var VCAP_SERVICES is not JSON: /${string}/`);
      }
    }
    if (!appEnv.isLocal) {
      return envValue;
    }
    locValue = options != null ? (ref = options.vcap) != null ? ref.services : void 0 : void 0;
    if (locValue != null) {
      return locValue;
    }
    return envValue;
  };

  //-------------------------------------------------------------------------------
  getPort = function(appEnv) {
    var e, port, portString, ref;
    portString = process.env.PORT || process.env.CF_INSTANCE_PORT || process.env.VCAP_APP_PORT || (appEnv != null ? (ref = appEnv.app) != null ? ref.port : void 0 : void 0);
    if (portString == null) {
      if (appEnv.name == null) {
        return 3000;
      }
      try {
        portString = `${ports.getPort(appEnv.name)}`;
      } catch (error) {
        e = error;
        portString = '3000';
      }
    }
    port = parseInt(portString, 10);
    if (isNaN(port)) {
      throwError(`invalid PORT value: /${portString}/`);
    }
    return port;
  };

  //-------------------------------------------------------------------------------
  getName = function(appEnv, options) {
    var pObject, pString, ref, val, yObject, yString;
    if (options.name != null) {
      return options.name;
    }
    val = (ref = appEnv.app) != null ? ref.name : void 0;
    if (val != null) {
      return val;
    }
    if (fs.existsSync("manifest.yml")) {
      yString = fs.readFileSync("manifest.yml", "utf8");
      yObject = yaml.load(yString, {
        filename: "manifest.yml"
      });
      if (yObject.applications != null) {
        yObject = yObject.applications[0];
      }
      if (yObject.name != null) {
        return yObject.name;
      }
    }
    if (fs.existsSync("package.json")) {
      pString = fs.readFileSync("package.json", "utf8");
      try {
        pObject = JSON.parse(pString);
      } catch (error) {
        pObject = null;
      }
      if (pObject != null ? pObject.name : void 0) {
        return pObject.name;
      }
    }
    return null;
  };

  //-------------------------------------------------------------------------------
  getBind = function(appEnv) {
    var ref;
    return ((ref = appEnv.app) != null ? ref.host : void 0) || "localhost";
  };

  //-------------------------------------------------------------------------------
  getURLs = function(appEnv, options) {
    var protocol, ref, uri, uris, urls;
    uris = (ref = appEnv.app) != null ? ref.uris : void 0;
    if (appEnv.isLocal) {
      uris = [`localhost:${appEnv.port}`];
    } else {
      if (uris == null) {
        uris = ["localhost"];
      }
    }
    protocol = options.protocol;
    if (protocol == null) {
      if (appEnv.isLocal) {
        protocol = "http:";
      } else {
        protocol = "https:";
      }
    }
    urls = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = uris.length; i < len; i++) {
        uri = uris[i];
        results.push(`${protocol}//${uri}`);
      }
      return results;
    })();
    return urls;
  };

  //-------------------------------------------------------------------------------
  throwError = function(message) {
    message = `${pkg.name}: ${message}`;
    console.log(`error: ${message}`);
    throw new Error(message);
  };

  //-------------------------------------------------------------------------------
// Copyright IBM Corp. 2014
// Copyright Patrick Mueller 2015, 2017

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//    http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-------------------------------------------------------------------------------

}).call(this);
